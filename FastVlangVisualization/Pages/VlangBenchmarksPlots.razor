@page "/"

@using FastVlangVisualization.DataGrabSystem
@using FastVlangVisualization.DataGrabSystem.PerformanceTestDataSystem
@using FastVlangVisualization.DataProcessorSystem
@using FastVlangVisualization.ProgressSystem

<style>
    header h1 {
        text-align: center;
    }
    
    header h3 {
        text-align: center;
    }
    
    header img {
        width: 30%;
        max-width: 400px;
        display: block;
        margin-left: auto;
        margin-right: auto; 
    }
    
    main {
        margin: 2.5% 1%;
    }
    
    main h4 {
        text-align: center;
    }
    
    main .plotContainer {
        margin-top: 1%;
        margin-bottom: 1%;
    }
    
    main .plotRangePickerContainer {
        text-align: center;
        margin-top: 2%;
    }
    
    main table, th, td {
        border: 1px solid black;
        border-collapse: collapse;
    }
    
    main th, td {
        padding: 15px;
    }
    
    main table {
        margin-left: auto;
        margin-right: auto;
    }
    
    footer {
        height: 5%;
        width: auto;
        text-align: center;
        margin-bottom: 1%;
    }
    
    footer div {
        width: fit-content;
        display: inline-block;
    }
    
    footer a {
        font-style: italic;
    }
    
    footer img {
        width: 2%;
        display: inline;
        object-fit: contain;
    }
    
    footer p {
        display: inline;
    }
</style>

<PageTitle>VlangBenchmarksPlots</PageTitle>

<header>
    <img src="images/v-logo.png" alt="Vlang main logo"/>
    <h1>Vlang Benchmarks Visualizations</h1>
    <h3>
        Interactive plots, based on the data from the
        <a href="https://fast.vlang.io/" target="_blank">
            <em>Is V still fast?</em>
        </a> page
    </h3>
</header>

<main>
    @switch (LoadingStatus)
    {
        case VlangBenchmarksPlotsLoadingStatus.PARSING_TEST_RESULTS:
            <div>
                <h4>Parsing test results from origin</h4>
            </div>
            break;
        case VlangBenchmarksPlotsLoadingStatus.PROCESSING_TEST_RESULTS:
            <div>
                <h4>Processing test results</h4>
            </div>
            break;
        case VlangBenchmarksPlotsLoadingStatus.PREPARING_PLOTS_DATA:
            <div>
                <h4>Preparing data for plots</h4>
            </div>
            break;
        case VlangBenchmarksPlotsLoadingStatus.READY:
            <div>
                <table>
                    <tr>
                        <th>Test</th>
                        <th>Average</th>
                        <th>Median</th>
                    </tr>

                    @foreach ((string? testName, List<IPerformanceTestData>? testResults) in VlangTestsDataProcessor.GroupedTestResultsMap)
                    {
                        <tr>
                            <td>@testName</td>
                            <td>@testResults[0].FormatValue(testResults.Average(testResult => testResult.PerformanceResultNumericValue).Value.ToString("F2"))</td>
                            <td>@testResults[0].FormatValue(testResults.OrderBy(testResult => testResult.PerformanceResultNumericValue).ElementAt(testResults.Count / 2).PerformanceResultNumericValue)</td>
                        </tr>
                    }
                </table>
            </div>

            foreach ((string? testName, List<IPerformanceTestData>? testResults) in VlangTestsDataProcessor.GroupedTestResultsMap)
            {
                <RadzenCard class="plotContainer">
                    <RadzenChart>
                        <RadzenLineSeries Smooth="false" Data="@testResults.Where(testData => testData.Timestamp.Date >= TestDataDaysRangeMap[testName][0] && testData.Timestamp.Date <= TestDataDaysRangeMap[testName][1])" CategoryProperty="Timestamp" Title="@testName" ValueProperty="PerformanceResultNumericValue">
                            <RadzenMarkers MarkerType="MarkerType.None"/>
                        </RadzenLineSeries>
                        <RadzenCategoryAxis Padding="20" FormatString="{0:dd/MM/y}"/>
                        <RadzenValueAxis Formatter="@testResults[0].FormatValue">
                            <RadzenGridLines Visible="true"/>
                        </RadzenValueAxis>
                    </RadzenChart>

                    <div class="plotRangePickerContainer">
                        <RadzenDatePicker @bind-Value=@TestDataDaysRangeMap[testName][0] DateFormat="dd/MM/y" YearRange="@GetDataYearRange(testResults)"/>
                        <RadzenDatePicker @bind-Value=@TestDataDaysRangeMap[testName][1] DateFormat="dd/MM/y" YearRange="@GetDataYearRange(testResults)"/>
                    </div>
                </RadzenCard>
            }

            break;
    }
</main>

<footer>
    <div>
        <img src="images/v-logo.png" alt="Vlang main logo"/>
        <p>logo by <a href="https://github.com/sonovice/" target="_blank">Sonovice</a> and <a href="https://github.com/donnisnoni/" target="_blank">Don</a>.</p>
    </div>
</footer>

@code {
    private IDataProcessor VlangTestsDataProcessor { get; set; }
    private Dictionary<string, DateTime[]> TestDataDaysRangeMap { get; set; }
    private VlangBenchmarksPlotsLoadingStatus LoadingStatus { get; set; }

    protected override async Task OnInitializedAsync ()
    {
        await GetTestsData();
        PreparePlotRanges();
        LoadingStatus = VlangBenchmarksPlotsLoadingStatus.READY;
    }

    private async Task GetTestsData ()
    {
        LoadingStatus = VlangBenchmarksPlotsLoadingStatus.PARSING_TEST_RESULTS;
        List<IPerformanceTestData> testResultsData = await new FastVlangWebPageDataGrabber("https://fast.vlang.io/").GetVlangSpeedDataAsync();

        LoadingStatus = VlangBenchmarksPlotsLoadingStatus.PROCESSING_TEST_RESULTS;
        VlangTestsDataProcessor = new VlangDataProcessor(testResultsData);
    }

    private void PreparePlotRanges ()
    {
        LoadingStatus = VlangBenchmarksPlotsLoadingStatus.PREPARING_PLOTS_DATA;
        TestDataDaysRangeMap = new Dictionary<string, DateTime[]>(VlangTestsDataProcessor.GroupedTestResultsMap.Count);

        foreach ((string? testName, List<IPerformanceTestData>? testResults) in VlangTestsDataProcessor.GroupedTestResultsMap)
        {
            DateTime[] sortedTestDates = testResults.OrderBy(testData => testData.Timestamp.Date).Select(testData => testData.Timestamp.Date).ToArray();
            TestDataDaysRangeMap.Add(testName, new[]
            {
                sortedTestDates[^1].Date.AddMonths(-2), sortedTestDates[^1].Date
            });
        }
    }

    private string GetDataYearRange (IEnumerable<IPerformanceTestData> testDataCollection)
    {
        DateTime[] sortedTestDates = testDataCollection.OrderBy(testData => testData.Timestamp.Date).Select(testData => testData.Timestamp.Date).ToArray();

        return $"{sortedTestDates[0].Year}:{sortedTestDates[^1].Year}";
    }

}