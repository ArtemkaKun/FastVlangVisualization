@page "/"
@using FastVlangVisualization.DataGrabSystem
@using FastVlangVisualization.DataGrabSystem.PerformanceTestDataSystem
@using FastVlangVisualization.DataProcessorSystem

<PageTitle>Index</PageTitle>

@if (VlangTestsDataProcessor == null || ChartRangeMap == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    @foreach ((string? testName, List<IPerformanceTestData>? testResults) in VlangTestsDataProcessor.GroupedTestResultsMap)
    {
        <div>
            <RadzenChart>
                <RadzenLineSeries Smooth="false" Data="@testResults.Where(testData => testData.Timestamp.Date >= ChartRangeMap[testName][0].Date && testData.Timestamp.Date <= ChartRangeMap[testName][1].Date)" CategoryProperty="Timestamp" Title="@testName" ValueProperty="PerformanceResultNumericValue">
                    <RadzenMarkers MarkerType="MarkerType.None"/>
                </RadzenLineSeries>
                <RadzenCategoryAxis Padding="20" FormatString="{0:dd/MM/y}"/>
                <RadzenValueAxis Formatter="@testResults[0].FormatValue">
                    <RadzenGridLines Visible="true"/>
                </RadzenValueAxis>
            </RadzenChart>
            
            <div>
                <RadzenCard>
                    <RadzenDatePicker @bind-Value=@ChartRangeMap[testName][0] DateFormat="dd/MM/y" />
                    <RadzenDatePicker @bind-Value=@ChartRangeMap[testName][1] DateFormat="dd/MM/y" />
                </RadzenCard>
            </div>
        </div>
    }
}

@code {
    private IDataProcessor VlangTestsDataProcessor { get; set; }
    private Dictionary<string, DateTime[]> ChartRangeMap { get; set;}

    protected override async Task OnInitializedAsync ()
    {
        List<IPerformanceTestData> testResultsData = await new FastVlangWebPageDataGrabber("https://fast.vlang.io/").GetVlangSpeedDataAsync();
        VlangTestsDataProcessor = new VlangDataProcessor(testResultsData);

        ChartRangeMap = new Dictionary<string, DateTime[]>(VlangTestsDataProcessor.GroupedTestResultsMap.Count);
        
        foreach ((string? testName, List<IPerformanceTestData>? testResults) in VlangTestsDataProcessor.GroupedTestResultsMap)
        {
           DateTime[] earliestTestDate = testResults.OrderBy(testData => testData.Timestamp).Select(testData => testData.Timestamp).ToArray();
           ChartRangeMap.Add(testName, new []{earliestTestDate[0], earliestTestDate[^1]});
        }
    }

}